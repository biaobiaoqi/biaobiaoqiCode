package biaobiaoqi.algorithm.oj.pat.basiclevel;

import java.util.Scanner;

/**
 * ???æ¡??ç¡??????¨å?é¢?³»ç»???ºç???»¤äººæ??????????é¢??äº?AT???ç­??æ­£ç¡®??¤§æ´¾é? ??? ???è¯»å????ç¬?¸²æ»¡è¶³ä¸???¡ä»¶ï¼?³»ç»?°±è¾?????æ¡??ç¡??ï¼??????ºâ?ç­????????

å¾?????æ¡??ç¡?????ä»¶æ?ï¼?
1. å­??ä¸²ä¸­å¿?¡»ä»??P, A, Tè¿??ç§??ç¬??ä¸??ä»¥å????å®??ç¬??
2. ä»»æ?å½¢å? xPATx ???ç¬?¸²?½å?ä»¥è?å¾??ç­??æ­£ç¡®????¶ä¸­ x ?????©ºå­??ä¸²ï????????±å?æ¯?A ç»?????ç¬?¸²ï¼?3. å¦?? aPbTc ???ç¡??ï¼??ä¹?aPbATca ä¹??æ­£ç¡®????¶ä¸­ a, b, c ??????ç©ºå?ç¬?¸²ï¼?????ä»??å­?? A ç»?????ç¬?¸²??
?°å?å°±è?ä½?¸ºPAT???ä¸???¨è??¤ç?åº???¤å????å­??ä¸²æ???»¥?·å????æ¡??ç¡?????
è¾???¼å?ï¼?æ¯?¸ªæµ??è¾?????1ä¸??è¯??ä¾??ç¬?è¡???ºä?ä¸???¶æ?n (<10)ï¼?????æ£?????ç¬?¸²ä¸?????ä¸??æ¯?¸ªå­??ä¸²å?ä¸??ï¼??ç¬?¸²?¿åº¦ä¸??è¿?00ï¼??ä¸????©º?¼ã?

è¾???¼å?ï¼??ä¸??ç¬?¸²???æµ?????ä¸??ï¼?????å­??ä¸²å?ä»¥è?å¾??ç­??æ­£ç¡®????????ESï¼???????O??
è¾???·ä?ï¼?8
PAT
PAAT
AAPATAA
AAPAATAAAA
xPATx
PT
Whatever
APAAATAA
è¾???·ä?ï¼?YES
YES
YES
YES
NO
NO
NO
NO

 * 
 * 
 * 1. ???è¿??é¢??è¯¥æ??´é??¨ç?è§£æ??? * 2. ?©ç?å¥?ava???ç¬?¸²å¤???½å??? * 
 * @author biaobiaoqi
 *
 */
public class BLPAT1003 {
	public static void main(String args[]) {
		Scanner cin = new Scanner(System.in);
		int n = cin.nextInt();
		String str;
		for (int i = 0 ; i < n ; i ++) {
			str = cin.next();
			decideProcess(str);	
			
		}		
	}
	
	public static boolean occurOnce(String str, char ch) {
		
		return (str.lastIndexOf(ch) == str.indexOf(ch)) && (str.lastIndexOf(ch) != -1) ;
 	}
	
	public static boolean allAString(String str) {
		for (int i = 0 ;  i != str.length(); i ++) {
			if (str.charAt(i) != 'A') {
				return false;
			}
		}
		return true;
	}
	
	public static void decideProcess(String str) {
		String result = null;
		int preCount = 0;
		int midCount = 0;
		int postCount = 0;
		
		//???????¶å?ï¼?²¡???å®??????å¯¹ä?ç½?????äº??
		if (occurOnce(str, 'P') && occurOnce(str, 'T') && str.indexOf('P') < str.indexOf('T')) {

			String str0 = str.substring(0, str.indexOf('P'));
			String str1 = str.substring(str.indexOf('P') + 1, str.indexOf('T'));
			String str2 = str.substring(str.indexOf('T') + 1, str.length() );

			if (allAString(str0) && allAString(str1) && allAString(str2)) {
				preCount = str0.length();
				midCount = str1.length();
				postCount = str2.length();
				
				if (midCount > 0 && preCount * midCount == postCount) {
					result = "YES";
				}else {
					result = "NO";
				}
				
			}else {
				result = "NO";
			}
			
		}else {
			result = "NO";
		}
		
		System.out.println(result);
	}

	
	public static void worongDecideProcess(String str) {
		String result = null;
		int preCount = 0;
		int middleCount = 0;
		boolean pre = true;
		boolean middle = false;
		int postCount = 0;

		for (int i = 0 ; i != str.length(); i ++ ) {
			char ch = str.charAt(i);
			if (!isLegal(ch) ) {
				result = "NO";
				break;
			}

			if (pre) {
				if (ch == 'A') {
					preCount ++;
				}else if (ch == 'P') {
					pre = false;
					middle = true;
				}else {
					result = "NO";
					break;
				}
			}else if (middle) {
				if (ch == 'A') {
					middleCount ++;
				}else if (ch == 'T' && middleCount >= 1) {
					middle = false;
					postCount = preCount * middleCount;
					if(postCount == 0) {
						result = "YES";
						break;
					}
				}else {
					result = "NO";
					break;
				}
			}else {
				if (ch == 'A') {
					postCount --;
				}
				
				if (i == str.length() - 1) {
					if (postCount == 0) {
						result = "YES";
						break;
					}else {
						result = "NO";
						break;
					}
				}
			}
		}
		
		System.out.println(result);

	}
	public static boolean isLegal(char ch) {
		return ch == 'P' || ch == 'A' || ch == 'T';
	}
}
