/*
第一思路是一个一个读入，从1-9分情况处理。实现比较麻烦，长达40行代码。

第二个思路，用空间换时间，非常屌。
*/
public class Solution {
    public String intToRoman(int num) {
        char [][] c = { {'I', 'V', 'X'}, {'X', 'L', 'C'}, {'C', 'D', 'M'}, {'M', '0', '0'} };
        int tmp = num;
        int f = 0;
        while (tmp != 0) {
            tmp /= 10;
            f ++;
        }
        
        StringBuilder sb = new StringBuilder();
        while (num != 0) {
            int v = num / getv(f);
            num -= v* getv(f --);
            
            if (v%5 <= 3) {
                if (v/5 == 1)
                    sb.append(c[f][1]);
                for (int i = 0; i < v%5; i ++)
                    sb.append(c[f][0]);
            } else if (v%5 == 4) {
                sb.append(c[f][0]);
                if (v/5 == 1)
                    sb.append(c[f][2]);
                else
                    sb.append(c[f][1]);
            } else {
                sb.append(c[f][1]);
            }
        }
        
        return sb.toString();
    }
    
    int getv(int f) {
        int ret = 1;
        while ( --f != 0)
            ret *= 10;
        return ret;
    }
}


public class Solution {
    public String intToRoman(int num) {
        int[] a =  {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};
        String[] c = {"M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"};
        
        StringBuilder sb = new StringBuilder();
        for (int i = 0; num != 0; i ++) {
            int v = num / a[i];
            num %= a[i];
            while (v-- != 0)
                sb.append(c[i]);
        }
        
        return sb.toString();
    }
}
