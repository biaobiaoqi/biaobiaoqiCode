public class Solution {
    public List<List<Integer>> permute(int[] num) {
        if (num == null || num.length == 0) return null;
        List<List<Integer>> ret = new LinkedList<List<Integer>>();
        List<Integer> solu = new ArrayList<Integer>();
        boolean[] selected = new boolean[num.length];
        dfs(ret, solu, num, selected);
        return ret;
    }
    
    private void dfs(List<List<Integer>> ret, List<Integer> solu, int[] num, boolean[] selected) {
        int n = num.length;
        if (solu.size() == n) {
            ret.add(new ArrayList<Integer>(solu)); //Take care of this! Must new a new arraylist.
            return;
        }
        for (int i = 0; i < n; i++) {
            if (!selected[i]) {
                solu.add(num[i]);
                selected[i] = true;
                dfs(ret, solu, num, selected);
                solu.remove(solu.size() - 1);
                selected[i] = false;
            }
        }
    }
}
