/*
数组是不是一般不太适合dfs？会超时？
dfs根本不合适，要太多逻辑判断矩形的形成条件。

解法：
* 抽象出求矩形面积的三个量：left，right，height。对他们分别DP求解。复杂度O(n^2)
* 其中height记录了遍历过程中每个点纵向的最长可扩展的高度。
* left和right分别记录了在纵向可扩展的高度上，横向可扩展的最大矩形左右边界。它的状态转移特别容易弄错。

复杂点的DP，都是多个DP状态的组合。
*/
public class Solution {
    public int maximalRectangle(char[][] matrix) {
        int m = matrix.length;
        if (m == 0) return 0;
        int n = matrix[0].length;
        int[] H = new int[n];
        int[] L = new int[n];
        int[] R = new int[n];
        Arrays.fill(R, n);

        int ret = 0;
        for (int i = 0; i < m; i ++) {
            int left = 0, right = n;
            for (int j = 0; j < n; j ++)
                if (matrix[i][j] == '1') {
                    L[j] = Math.max(left, L[j]); //L[j] in max() contains left index for [i-1][j]. Make sure the left limits of rectangle constaining point [i][j] .
                    ++ H[j];
                } else {
                    left = j + 1;
                    H[j] = 0; L[j] = 0; R[j] = n;
                }

            for (int j = n - 1; j >= 0; -- j) 
                if (matrix[i][j] == '1') {
                    R[j] = Math.min(R[j], right) //R[j] in min() contains right index for [i-1][j]; Make sure the right limits of rectangle containing point [i][j].
                    ret = Math.max(ret, H[j] * (R[j] - L[j]));
                } else {
                    right = j;
                }
        }

        return ret;
    }
}
