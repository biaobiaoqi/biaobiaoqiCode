/*
BST最经典的用法：中序遍历为排序的。
用数组构建树，中序遍历赋值。

也可以直接用二分法写构建。

正常的插入方法似乎不太常用呢。
*/
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode sortedArrayToBST(int[] num) {
        if (num == null || num.length == 0) 
            return null;
        
        int n = num.length;
        TreeNode[] bst = new TreeNode[n];
        for (int i = n - 1; i >= 0; i --) {
            bst[i] = new TreeNode(0);
            bst[i].left = i*2 + 1 < n ? bst[i*2 + 1] : null;
            bst[i].right = i*2 + 2 < n ? bst[i*2 + 2] : null;
        }
        
        inorder(bst[0], num);
        
        return bst[0];
    }
    
    private int index = 0;
    private void inorder(TreeNode root, int[] num) {
        if (root == null)
            return;
        
        inorder(root.left, num);
        root.val = num[index ++];
        inorder(root.right, num);
    }
}
