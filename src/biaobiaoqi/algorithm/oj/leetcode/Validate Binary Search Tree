//基于左边叶子是最小的点，右边叶子是最大的点的规律做递归的查找。
public class Solution {
    public boolean isValidBST(TreeNode root) {
        if (root == null) return true;
        boolean ret = true;
        
        TreeNode node = root.left;
        if (node != null) {
            while(node.right != null)
                node = node.right;
            ret &= node.val < root.val;
        }
        
        node = root.right;
        if (node != null) {
            while(node.left != null)
                node = node.left;
            ret &= node.val > root.val;
        }
            
        ret &= isValidBST(root.left) && isValidBST(root.right);
        return ret;
    }
}

//中序遍历
public class Solution {
    public boolean isValidBST(TreeNode root) {
        return inOrder(root, new LinkedList<Integer>());
    }
    
    private boolean inOrder(TreeNode root, List<Integer> vals) {
        if (root == null) return true;
        
        boolean ret = true;
        ret &= inOrder(root.left, vals);
        if (vals.size() != 0) 
            ret &= vals.get(vals.size() - 1) < root.val;
        vals.add(root.val);
        ret &= inOrder(root.right, vals);
        return ret;
    }
}
