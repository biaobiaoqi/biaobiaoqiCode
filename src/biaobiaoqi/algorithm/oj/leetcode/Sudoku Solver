/*暴力枚举，dfs遍历树形解空间，做好剪枝。
与多个解的问题不同的是这里只有一个solution。于是不是每次dfs最末端时候将solution放到list中，而是需要dfs方法中加入boolean返回值，来判定是否已经完成了这一过程，实现返回。

*/
public class Solution {
    public void solveSudoku(char[][] board) {
        solve(board);
    }
    
    private boolean solve(char[][] board) {
        for (int i = 0; i < 9; i ++)
            for (int j = 0; j < 9; j ++)
                if (board[i][j] == '.') {
                    for (int k = 1; k < 10; k ++) {
                        board[i][j] = (char)('0' + k);  //take care of the type convertion
                        if (isValid(board, i, j, k) && solve(board))
                            return true;
                        board[i][j] = '.';
                    }
                    
                    return false;
                }
        return true;
    }
    
    private boolean isValid(char[][] board, int x, int y, int val) {
        for (int i = 0; i < 9; i ++) {
            if (i != x && board[i][y] == board[x][y])
                return false;
            if (i != y && board[x][i] == board[x][y])
                return false;
        }
        
        for (int i = x/3 * 3; i < x/3 * 3 + 3; i ++) 
            for (int j = y/3 * 3; j < y/3 * 3 + 3; j ++)
                if ( (i != x || j != y) && board[i][j] == board[x][y])
                    return false;
                    
        return true;
    }
}
