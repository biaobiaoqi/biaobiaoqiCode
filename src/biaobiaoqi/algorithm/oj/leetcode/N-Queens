public class Solution {
    public List<String[]> solveNQueens(int n) {
        List<String[]> ret = new ArrayList<String[]>();
        int[] ans = new int[n];
        boolean[] row = new boolean[n], tri1 = new boolean[2*n], tri2 = new boolean[2*n];
        dfs(ret, ans, row, tri1, tri2, 0, n);
        return ret;
    }
    
    void dfs(List<String[]> ret, int[] ans, boolean[] row, boolean[] tri1, boolean[] tri2, int level, int n) {
        if (level == n) {
            ret.add(getResult(ans, n));
            return;
        }
        
        for (int i = 0; i < n; i++) {
            if (!row[i] && !tri1[n + i - level] && !tri2[i + level]) {
                row[i] = true;
                tri1[n + i - level] = true;
                tri2[i + level] = true;
                ans[level] = i;
                dfs(ret, ans, row, tri1, tri2, level + 1, n);
                row[i] = false;
                tri1[n + i - level] = false;
                tri2[i + level] = false;
            }
        }
    }
    
    String[] getResult(int[] ans, int n) {
        String[] ret = new String[n];
        for (int i = 0; i < n; i++) {
            StringBuilder sb = new StringBuilder();
            for (int j = 0; j < n; j++) {
                sb.append( ans[i] == j ? 'Q' : '.');
            }
            ret[i] = sb.toString();
        }
        return ret;
    }
}
