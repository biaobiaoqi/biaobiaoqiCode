public class Solution {
    public ArrayList<String[]> solveNQueens(int n) {
        STR = new String[n];
        this.n = n;
        for (int i = 0; i < n; i ++) {
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < n; j ++) 
                if (j == i)
                    sb.append('Q');
                else
                    sb.append('.');
            STR[i] = sb.toString();
        }
        used = new boolean[n];
        mainDiag = new boolean[2*n];
        antiDiag = new boolean[2*n];
        
        ArrayList<String[]> res = new ArrayList<String[]>();
        int[] solu = new int[n];
        int level = 0;
        dfs(level, res, solu);
        return res;
    }
    
    private String[] STR;
    private int n;
    private boolean[] used;
    private boolean[] mainDiag;
    private boolean[] antiDiag;
    
    private void dfs(int level, ArrayList<String[]> res, int[] solu) {
        if (level == n) {
            res.add(getSolution(solu));
            return;
        }
        for (int i = 0; i < n; i ++) {
            if (!used[i] && !mainDiag[n + level - i] && !antiDiag[i + level]) {
                solu[level] = i;
                used[i] = true;
                mainDiag[n + level - i] = true;
                antiDiag[i + level] = true;
                dfs(level + 1, res, solu);
                used[i] = false;
                mainDiag[n + level - i] = false;
                antiDiag[i + level] = false;
            }
        }
    }
    
    private String[] getSolution(int[] solu) {
        String[] solution = new String[solu.length];
        for (int i = 0; i < solution.length; i ++) 
            solution[i] = STR[solu[i]];
        return solution;
    }
}
