/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
 //单向链表逆转是很经典的题目，这里还增加了逆转区间。递归的方法效率不高，这里用两种遍历的方法实现：

//遍历的逆转，用变量记录prev、cur、next方法（比较容易理解的基本方法）
public class Solution {
    public ListNode reverseBetween(ListNode head, int m, int n) {
        if (m == n) return head;
        
        ListNode reverseStart = null, reverseStartPre = null;
        ListNode pre = null;
        ListNode cur = head;
        ListNode next = null;
        
        int index = 0;
        while ( ++ index  <= n) {
            if (index == m) {
                reverseStartPre = pre;
                reverseStart = cur;
            }
            
            next = cur.next;
            if (index >= m && index <= n) {
               if (index == n) {
                    if (m == 1)
                        head = cur;
                    else 
                        reverseStartPre.next = cur;

                    reverseStart.next = cur.next;
                }
                cur.next = pre;
            }
            pre = cur;
            cur = next;
        }
        
        return head;
    }
}




//非递归，插入方法，prevm 和prev两个指针指向的结点不变。
public class Solution {
    public ListNode reverseBetween(ListNode head, int m, int n) {
        ListNode h = new ListNode(-1);
        h.next = head;
        ListNode prev = h;
        ListNode prevm = null;
        for (int i = 1; i <= n; i ++) { //注意在不同情况下，分开写prev变换的语句，合起来容易把逻辑搞混乱。宁可先分开写，再合并。
            if (i == m) {
                prevm = prev;
                prev = prev.next;
            }else if (i > m && i <= n) {
                ListNode tmp = prev.next.next;
                prev.next.next = prevm.next;
                prevm.next = prev.next;
                prev.next = tmp;
            }  else 
                prev = prev.next;
        }
        return h.next;
    }
}
