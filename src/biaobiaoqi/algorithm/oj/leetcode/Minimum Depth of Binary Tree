/*
方法一是递归，方法二是迭代。
*/

/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int minDepth(TreeNode root) {
        if (root == null) return 0;
        return minD(root);
    }
    
    private int minD(TreeNode root) {
        if (root == null) return Integer.MAX_VALUE;
        if (root.left == null && root.right == null) return 1;
        int left = minD(root.left);
        int right = minD(root.right);
        return left < right ? left + 1 : right + 1;
    }
}


public class Solution {
    public int minDepth(TreeNode root) {
        Queue<TreeNode> curQue = new LinkedList<TreeNode>();
        Queue<TreeNode> nextQue = new LinkedList<TreeNode>();
        int depth = 0;
        if (root != null)
            curQue.add(root);

        while (curQue.size() != 0) {
            depth++;
            while (curQue.size() != 0) {
                TreeNode node = curQue.poll();
                if (node.left == null && node.right == null) {
                    nextQue.clear();
                    break;
                } 
                if (node.left != null) 
                    nextQue.add(node.left);
                if (node.right != null)
                    nextQue.add(node.right);
            }
            Queue<TreeNode> tmp = curQue;
            curQue = nextQue;
            nextQue = tmp;
        }
        return depth;
    }
}
