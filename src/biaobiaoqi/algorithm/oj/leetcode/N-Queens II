public class Solution {
    public int totalNQueens(int n) {
        boolean[] row = new boolean[n], tri1 = new boolean[2*n], tri2 = new boolean[2*n];
        return dfs(row, tri1, tri2, 0, n);
    }
    
    private int dfs(boolean[] row, boolean[] tri1, boolean[] tri2, int level, int n) {
        if (level == n) {
            return 1;
        }
        
        int ret = 0;
        for (int i = 0; i < n; i++) {
            if (!row[i] && !tri1[n + i - level] && !tri2[i + level]) {
                row[i] = true;
                tri1[n + i - level] = true;
                tri2[i + level] = true;
                ret += dfs(row, tri1, tri2, level + 1, n);
                row[i] = false;
                tri1[n + i - level] = false;
                tri2[i + level] = false;
            }
        }
        
        return ret;
    }
}
