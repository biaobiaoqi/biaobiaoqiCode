/*
第一种是稍显复杂的DFS。

第二种：递归。适合C++，因为有大量字符串操作。

*/
public class Solution {
    public List<String> generateParenthesis(int n) {
        boolean[] solu = new boolean[2*n];
        List<String> ret = new LinkedList<String>();
        dfs(ret, solu, 0, 2*n);
        return ret;
    }
    
    private void dfs(List<String> ret, boolean[] solu, int index, int n) {
        if (index == n) {
            ret.add(getString(solu, n));
            return;
        }
        
        int leftBracketCount = 0;
        for (int i = 0; i < index; i++)
            leftBracketCount += solu[i] ? 1 : 0;

        
        //( is too more
        if (2*leftBracketCount <  n) {
            solu[index] = true;
            dfs(ret, solu, index + 1, n);
        }
        
        //) is too more
        if (2*leftBracketCount > index) {
            solu[index] = false;
            dfs(ret, solu, index + 1, n);
        }
    }
    
    private String getString(boolean[] solu, int n) {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < n; i++)
            sb.append(solu[i] ? '(' : ')');
        return sb.toString();
    }
}
