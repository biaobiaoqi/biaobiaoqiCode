//递归一定记得 状态的改变和回退。
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        List<List<Integer>> ret = new LinkedList<List<Integer>>();
        List<Integer> solu = new ArrayList<Integer>();
        dfs(sum, ret, solu, root);
        return ret;
    }
    
    private void dfs(int sum, List<List<Integer>> ret, List<Integer> solu, TreeNode root) {
        if (root == null)
            return;

        solu.add(root.val);
        sum -= root.val;
        if (sum == 0 && root.left == null && root.right == null) {
                ret.add(new ArrayList<Integer>(solu));
                solu.remove(solu.size() - 1);
                return;
        }
        
        dfs(sum, ret, solu, root.left);
        dfs(sum, ret, solu, root.right);
        solu.remove(solu.size() - 1);
    }
}
