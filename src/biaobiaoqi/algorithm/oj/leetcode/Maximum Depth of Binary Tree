/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
public class Solution {
    public int maxDepth(TreeNode root) {
        if (root == null) return 0;
        int leftDepth = maxDepth(root.left);
        int rightDepth = maxDepth(root.right);
        return 1 + (leftDepth > rightDepth ? leftDepth : rightDepth);
    }
}

public class Solution {
    public int maxDepth(TreeNode root) {
        if ( root == null) return 0;
        int ret = 0;
        List<TreeNode> cur = new ArrayList<TreeNode>();
        List<TreeNode> next = new ArrayList<TreeNode>();
        cur.add(root);
        
        while(cur.size() != 0) {
            while(cur.size()!= 0) {
                TreeNode node = cur.get(cur.size() - 1);
                if (node.left != null) next.add(node.left);
                if (node.right != null) next.add(node.right);
                cur.remove(cur.size() - 1);
            }
        
            ++ ret;
            
            List<TreeNode> tmp = cur;
            cur = next;
            next = tmp;
        }
        
        return ret;
    }
}
