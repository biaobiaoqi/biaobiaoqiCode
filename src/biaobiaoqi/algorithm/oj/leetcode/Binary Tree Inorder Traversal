/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ArrayList<Integer> inorderTraversal(TreeNode root) {
        ArrayList<Integer> ret = new ArrayList<Integer>();
        trav(ret, root);
        return ret;
    }
    
    private void trav(ArrayList<Integer> ret, TreeNode node) {
        if (node == null) return;
    
        trav(ret, node.left);
        ret.add(node.val);
        trav(ret, node.right);
    }
}


//两个stack实现

public class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        Stack<TreeNode> st1 = new Stack<TreeNode>();
        Stack<TreeNode> st2 = new Stack<TreeNode>();
        List<Integer> ret = new ArrayList<Integer>();
        if (root != null) st1.push(root);
        
        while(!st1.empty()) {
            TreeNode cur = st1.pop();
            if (!st2.empty() && st2.peek() == cur) {
                st2.pop();
                ret.add(cur.val);
                if (cur.right != null) 
                    st1.push(cur.right);
            } else {
                st1.push(cur);
                st2.push(cur);
                if (cur.left != null)
                    st1.push(cur.left);
            }
        }
        
        return ret;
    }
}



/*
非递归做法：自己作图找规律
*/

public class Solution {
    public ArrayList<Integer> inorderTraversal(TreeNode root) {
        ArrayList<Integer> ret = new ArrayList<Integer>();
        Stack<TreeNode> st = new Stack<TreeNode>();
        TreeNode node = root;
        
        while(!st.empty() || node != null) {
            if (node != null) {
                st.add(node);
                node = node.left;
            } else {
                node = st.peek();
                st.pop();
                ret.add(node.val);
                node = node.right;
            }
        }
        
        return ret;
    }
}


