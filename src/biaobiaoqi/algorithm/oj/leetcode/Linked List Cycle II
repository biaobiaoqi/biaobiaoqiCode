/*
while循环的时候，尽量将停止条件都提出到while循环判断上，减少出错的可能。
这个题思路单一，但是要特别注意边界条件。比如，先next再判定是否相等，还是反过来。

下面第一种实现，思路上更直白一点。
*/
/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
 public class Solution {
    public ListNode detectCycle(ListNode head) {
        ListNode fast = head;
        ListNode slow = head;
        ListNode meet = null;
        while(fast != null && fast.next != null) {
            fast = fast.next.next;
            slow = slow.next;
            if (fast == slow) {
                meet = fast;
                break;
            }
        }
        
        if (meet == null)
            return null;
        
        fast = head;
        while(fast != slow) {
            fast = fast.next;
            slow = slow.next;
        } 
        
        return slow;
    }
}


public class Solution {
    public ListNode detectCycle(ListNode head) {
        ListNode fastNode = head != null ? head.next : null;
        ListNode slowNode = head;
        while (fastNode != null && fastNode.next != null && fastNode != slowNode) {
            fastNode = fastNode.next.next;
            slowNode = slowNode.next;
        }
        
        if (fastNode == null || fastNode != slowNode)
            return null;
        
        fastNode = head; 
        slowNode = slowNode.next; //这里特别注意：重置的头指针玩始于哪里。
        while (fastNode != slowNode) {
            fastNode = fastNode.next;
            slowNode = slowNode.next;
        }
        return fastNode;
    }
}
