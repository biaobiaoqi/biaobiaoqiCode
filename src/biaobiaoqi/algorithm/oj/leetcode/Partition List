//将小的结点不断交换到大的前面（实现起来略复杂）
public class Solution {
    public ListNode partition(ListNode head, int x) {
        ListNode h = new ListNode(-1);
        h.next = head;
        ListNode prev = h;
        ListNode cur = head;
        ListNode div = null;
        while (cur != null) {
            if (div == null && cur.val >= x) {
                div = prev;
                prev = cur;
                cur = cur.next;
            } else if (div != null && cur.val < x) {
                ListNode tmp = cur.next;
                cur.next = div.next;
                div.next = cur;
                prev.next = tmp;
                
                cur = prev.next;
                div = div.next;
            } else {
                prev = cur;
                cur = cur.next;
            }
        }
        return h.next;
    }
}

//更简单、易实现的方法：重新创建两条链表，再组合起来；
public class Solution {
    public ListNode partition(ListNode head, int x) {
        ListNode leftHead = new ListNode(-1);
        ListNode rightHead = new ListNode(-1);
        ListNode left = leftHead;
        ListNode right = rightHead;
        while (head != null) {
            if (head.val < x) {
                left.next = head;
                left = head;
            } else {
                right.next = head;
                right = head;
            }
            head = head.next;
        }
        left.next = rightHead.next;
        right.next = null; //这句容易忽略
        return leftHead.next;
    }
}
